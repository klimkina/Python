def get_energy():
    energy = pd.read_excel("Energy Indicators.xls", header = 1, skiprows = 15, parse_cols= "C:G",
                   na_values = "...", skip_footer=38, thousands=',')
    energy = energy[1:]
    energy.columns.values[0] = "Country"
    energy = energy.rename(columns={'Renewable Electricity Production': '% Renewable'})
    energy = energy.rename(columns={'Energy Supply per capita': 'Energy Supply per Capita'})
    energy['Country'].replace({"\(.*\)":""}, regex=True, inplace=True)
    energy['Country'] = energy['Country'].map(lambda x: x.strip(''))
    energy['Country'].replace({"[0-9]+":""}, regex=True, inplace=True)
    energy['Country'] = energy['Country'].map(lambda x: x.strip())
    energy.replace({"Republic of Korea": "South Korea"}, inplace=True)
    energy.replace({"United States of America": "United States"}, inplace=True)
    energy.replace({"United Kingdom of Great Britain and Northern Ireland": "United Kingdom"}, inplace=True)
    energy.replace({"China, Hong Kong Special Administrative Region": "Hong Kong"}, inplace=True)
    #energy.set_index('Country', drop=True, inplace=True, verify_integrity=True)
    return energy

def get_GDP():
    GDP = pd.read_csv('world_bank.csv', skiprows=4, thousands=',')
    GDP['Country Name'].replace({"[0-9]+":""}, regex=True, inplace=True)
    GDP.replace({"Korea, Rep.": "South Korea"}, inplace=True)
    GDP.replace({"Iran, Islamic Rep.": "Iran"}, inplace=True)
    GDP.replace({"Hong Kong SAR, China": "Hong Kong"}, inplace=True)  
    GDP = GDP.rename(columns={'Country Name': 'Country'})
    return GDP

def get_ScimEn():
    ScimEn = pd.read_excel("scimagojr.xlsx", header = 0, na_values = "...", thousands=',')
    return ScimEn

def answer_one():
    energy = get_energy()
    GDP = get_GDP()
    ScimEn = get_ScimEn()
    df = pd.merge(pd.merge(energy, GDP, on='Country'),ScimEn,on='Country')
    df1 = pd.merge(pd.merge(energy, GDP, on='Country'),ScimEn,on='Country')
    df = df[['Country', 'Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations',
       	'Citations per document', 'H index', 'Energy Supply',
       	'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008',
       	'2009', '2010', '2011', '2012', '2013', '2014', '2015']]
    df.set_index('Country', drop=True, inplace=True, verify_integrity=True)

    return df[df['Rank'] < 16]

def answer_two():
    return len(df)-len(df[df['Rank'] < 16])

def answer_three():
    df = df[df['Rank'] < 16]
    avgGDP = df[['2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']].mean(skipna=True, axis=1).sort_values(ascending=False)
    return avgGDP

def answer_four():
    df['avg GDP'] = df[['2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015']]\
    .mean(skipna=True, axis=1)
    df.sort_values('avg GDP',ascending=False, inplace=True)
    return df.loc[5]['2015'] - df.loc[5]['2006']

def answer_five():
    return energy['Energy Supply per capita'].mean()

def answer_six():
    energy.sort_values('% Renewable',ascending=False, inplace=True)
    return ((energy.iloc[0]).name, energy.iloc[0].get_value('% Renewable'))

def answer_seven():
    ScimEn['Ratio'] = ScimEn['Self-citations']/ScimEn['Citations']
    return (ScimEn.iloc[ScimEn['Ratio'].idxmax()]['Country'], ScimEn['Ratio'].max())

def answer_eight():
    energy['Population'] = energy['Energy Supply']/energy['Energy Supply per capita']
    energy.sort_values('Population',ascending=False, inplace=True)
    return energy.iloc[2].get_value('Country')

def answer_nine():
    df['Population'] = df['Energy Supply']/df['Energy Supply per capita']
    df['Citable documents per person'] = df['Citable documents']/df['Population']
    return df[['Citable documents per person', 'Energy Supply per capita']]
      .corr(method='pearson', min_periods=0)['Citable documents per person'][1]

def answer_ten():
    def is_high(x):
        return 1 if (x >= df['% Renewable'].median()) else 0
    df['HighRenew'] = df['% Renewable'].apply(is_high)
    return df[df['HighRenew'] > 0].sort_values('Rank',ascending=False)['Country']

def answer_eleven():
    df['Continent'] = df["Country"].map(ContinentDict)
    df2 = df.groupby('Continent')['PopulationEst'].agg(['size', 'sum','mean','std'])
    return df2